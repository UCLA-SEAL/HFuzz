[{"path":"/home/u93631/A10_oneapi/matrix_mul/src/FakeIOPipes.hpp", "name":"FakeIOPipes.hpp", "has_active_debug_locs":false, "absName":"/home/u93631/A10_oneapi/matrix_mul/src/FakeIOPipes.hpp", "content":"#ifndef __FAKEIOPIPES_HPP__\u000A#define __FAKEIOPIPES_HPP__\u000A\u000A#include <iostream>\u000A#include <type_traits>\u000A#include <utility>\u000A\u000A#include <CL/sycl.hpp>\u000A#include <sycl/ext/intel/fpga_extensions.hpp>\u000A\u000A// the \"detail\" namespace is commonly used in C++ as an internal namespace\u000A// (to a file) that is not meant to be visible to the public and should be\u000A// ignored by external users. That is to say, you should never have the line:\u000A// \"using namespace detail;\" in your code!\u000A//\u000A// \"internal\" is another common name for a namespace like this.\u000Anamespace detail {\u000A\u000Ausing namespace sycl;\u000A\u000Atemplate <typename ID, typename T, bool use_host_alloc>\u000Aclass ProducerConsumerBaseImpl {\u000A protected:\u000A  // private members\u000A  static inline T *host_data_{nullptr};\u000A  static inline T *device_data_{nullptr};\u000A  static inline size_t count_{};\u000A  static inline bool initialized_{false};\u000A\u000A  // use some fancy C++ metaprogramming to get the correct pointer type\u000A  // based on the template variable\u000A  typedef\u000A      typename std::conditional_t<use_host_alloc, host_ptr<T>, device_ptr<T>>\u000A          kernel_ptr_type;\u000A\u000A  // private constructor so users cannot make an object\u000A  ProducerConsumerBaseImpl(){};\u000A\u000A  static T *get_kernel_ptr() {\u000A    return use_host_alloc ? host_data_ : device_data_;\u000A  }\u000A\u000A  static void initialized_check() {\u000A    if (!initialized_) {\u000A      std::cerr << \"ERROR: Init() has not been called\\n\";\u000A      std::terminate();\u000A    }\u000A  }\u000A\u000A public:\u000A  // disable copy constructor and operator=\u000A  ProducerConsumerBaseImpl(const ProducerConsumerBaseImpl &) = delete;\u000A  ProducerConsumerBaseImpl &operator=(ProducerConsumerBaseImpl const &) =\u000A      delete;\u000A\u000A  static void Init(queue &q, size_t count) {\u000A    // make sure init hasn't already been called\u000A    if (initialized_) {\u000A      std::cerr << \"ERROR: Init() was already called\\n\";\u000A      std::terminate();\u000A    }\u000A\u000A    // track count\u000A    count_ = count;\u000A\u000A    // check for USM support\u000A    device d = q.get_device();\u000A    if (!d.get_info<info::device::usm_host_allocations>() && use_host_alloc) {\u000A      std::cerr << \"ERROR: The selected device does not support USM host\"\u000A                << \" allocations\\n\";\u000A      std::terminate();\u000A    }\u000A    if (!d.get_info<info::device::usm_device_allocations>()) {\u000A      std::cerr << \"ERROR: The selected device does not support USM device\"\u000A                << \" allocations\\n\";\u000A      std::terminate();\u000A    }\u000A\u000A    // Allocate the space the user requested. Calling a different malloc\u000A    // based on whether the user wants to use USM host allocations or not.\u000A    if (use_host_alloc) {\u000A      host_data_ = malloc_host<T>(count_, q);\u000A    } else {\u000A      host_data_ = new T[count_];\u000A    }\u000A\u000A    if (host_data_ == nullptr) {\u000A      std::cerr << \"ERROR: failed to allocate space for host_data_\\n\";\u000A      std::terminate();\u000A    }\u000A\u000A    // if not using host allocations, allocate device memory\u000A    if (!use_host_alloc) {\u000A      device_data_ = malloc_device<T>(count_, q);\u000A      if (device_data_ == nullptr) {\u000A        std::cerr << \"ERROR: failed to allocate space for\"\u000A                  << \"device_data_\\n\";\u000A        std::terminate();\u000A      }\u000A    }\u000A\u000A    initialized_ = true;\u000A  }\u000A\u000A  static void Destroy(queue &q) {\u000A    initialized_check();\u000A\u000A    // free memory depending on 'use_host_alloc' flag\u000A    if (use_host_alloc) {\u000A      // free USM host allocation\u000A      sycl::free(host_data_, q);\u000A    } else {\u000A      // free C++ allocated memory\u000A      delete[] host_data_;\u000A\u000A      // free USM device allocation\u000A      sycl::free(device_data_, q);\u000A    }\u000A\u000A    initialized_ = false;\u000A  }\u000A\u000A  static size_t Count() {\u000A    initialized_check();\u000A    return count_;\u000A  }\u000A\u000A  static T *Data() {\u000A    initialized_check();\u000A    return host_data_;\u000A  }\u000A};\u000A\u000A////////////////////////////////////////////////////////////////////////////////\u000A// Producer implementation\u000Atemplate <typename Id, typename T, bool use_host_alloc, size_t min_capacity>\u000Aclass ProducerImpl : public ProducerConsumerBaseImpl<Id, T, use_host_alloc> {\u000A private:\u000A  // base implementation alias\u000A  using BaseImpl = ProducerConsumerBaseImpl<Id, T, use_host_alloc>;\u000A  using kernel_ptr_type = typename BaseImpl::kernel_ptr_type;\u000A\u000A  // IDs for the pipe and kernel\u000A  class PipeID;\u000A  class KernelID;\u000A\u000A  // private constructor so users cannot make an object\u000A  ProducerImpl(){};\u000A\u000A public:\u000A  // disable copy constructor and operator=\u000A  ProducerImpl(const ProducerImpl &) = delete;\u000A  ProducerImpl &operator=(ProducerImpl const &) = delete;\u000A\u000A  // the pipe to connect to in device code\u000A  using Pipe = sycl::ext::intel::pipe<PipeID, T, min_capacity>;\u000A\u000A  // the implementation of the static\u000A  static std::pair<event, event> Start(queue &q,\u000A                                       size_t count = BaseImpl::count_) {\u000A    // make sure initialized has been called\u000A    BaseImpl::initialized_check();\u000A\u000A    // can't produce more data than exists\u000A    if (count > BaseImpl::count_) {\u000A      std::cerr << \"ERROR: Start() called with count=\" << count\u000A                << \" but allocated size is \" << BaseImpl::count_ << \"\\n\";\u000A      std::terminate();\u000A    }\u000A\u000A    // If we aren't using USM host allocations, must transfer memory to device\u000A    event dma_event;\u000A    if (!use_host_alloc) {\u000A      dma_event = q.memcpy(BaseImpl::device_data_, BaseImpl::host_data_,\u000A                           BaseImpl::count_ * sizeof(T));\u000A    }\u000A\u000A    // pick the right pointer to pass to the kernel\u000A    auto kernel_ptr = BaseImpl::get_kernel_ptr();\u000A\u000A    // launch the kernel (use event.depends_on to wait on the memcpy)\u000A    auto kernel_event = q.submit([&](handler &h) {\u000A      // the kernel must wait until the DMA transfer is done before launching\u000A      // this will only take affect it we actually performed the DMA above\u000A      h.depends_on(dma_event);\u000A\u000A      // the producing kernel\u000A      // NO-FORMAT comments are for clang-format\u000A      h.single_task<Id>([=\u000A      ]() [[intel::kernel_args_restrict]] {  // NO-FORMAT: Attribute\u000A        kernel_ptr_type ptr(kernel_ptr);\u000A        for (size_t i = 0; i < count; i++) {\u000A          auto d = *(ptr + i);\u000A          Pipe::write(d);\u000A        }\u000A      });\u000A    });\u000A\u000A    return std::make_pair(dma_event, kernel_event);\u000A  }\u000A};\u000A////////////////////////////////////////////////////////////////////////////////\u000A\u000A////////////////////////////////////////////////////////////////////////////////\u000A// Consumer implementation\u000Atemplate <typename Id, typename T, bool use_host_alloc, size_t min_capacity>\u000Aclass ConsumerImpl : public ProducerConsumerBaseImpl<Id, T, use_host_alloc> {\u000A private:\u000A  // base implementation alias\u000A  using BaseImpl = ProducerConsumerBaseImpl<Id, T, use_host_alloc>;\u000A  using kernel_ptr_type = typename BaseImpl::kernel_ptr_type;\u000A\u000A  // IDs for the pipe and kernel\u000A  class PipeID;\u000A  class KernelID;\u000A\u000A  // private constructor so users cannot make an object\u000A  ConsumerImpl(){};\u000A\u000A public:\u000A  // disable copy constructor and operator=\u000A  ConsumerImpl(const ConsumerImpl &) = delete;\u000A  ConsumerImpl &operator=(ConsumerImpl const &) = delete;\u000A\u000A  // the pipe to connect to in device code\u000A  using Pipe = sycl::ext::intel::pipe<PipeID, T, min_capacity>;\u000A\u000A  static std::pair<event, event> Start(queue &q,\u000A                                       size_t count = BaseImpl::count_) {\u000A    // make sure initialized has been called\u000A    BaseImpl::initialized_check();\u000A\u000A    // can't produce more data than exists\u000A    if (count > BaseImpl::count_) {\u000A      std::cerr << \"ERROR: Start() called with count=\" << count\u000A                << \" but allocated size is \" << BaseImpl::count_ << \"\\n\";\u000A      std::terminate();\u000A    }\u000A\u000A    // pick the right pointer to pass to the kernel\u000A    auto kernel_ptr = BaseImpl::get_kernel_ptr();\u000A\u000A    // launch the kernel to read the output into device side global memory\u000A    auto kernel_event = q.submit([&](handler &h) {\u000A      // NO-FORMAT comments are for clang-format\u000A      h.single_task<Id>([=\u000A      ]() [[intel::kernel_args_restrict]] {  // NO-FORMAT: Attribute\u000A        kernel_ptr_type ptr(kernel_ptr);\u000A        for (size_t i = 0; i < count; i++) {\u000A          auto d = Pipe::read();\u000A          *(ptr + i) = d;\u000A        }\u000A      });\u000A    });\u000A\u000A    // if the user wanted to use board memory, copy the data back to the host\u000A    event dma_event;\u000A    if (!use_host_alloc) {\u000A      // launch a task to copy the data back from the device. Use the\u000A      // event.depends_on signal to wait for the kernel to finish first.\u000A      dma_event = q.submit([&](handler &h) {\u000A        h.depends_on(kernel_event);\u000A        h.memcpy(BaseImpl::host_data_, BaseImpl::device_data_,\u000A                 BaseImpl::count_ * sizeof(T));\u000A      });\u000A    }\u000A\u000A    return std::make_pair(dma_event, kernel_event);\u000A  }\u000A};\u000A////////////////////////////////////////////////////////////////////////////////\u000A\u000A}  // namespace detail\u000A\u000A// alias the implementations to face the user\u000Atemplate <typename Id, typename T, bool use_host_alloc, size_t min_capacity = 0>\u000Ausing Producer = detail::ProducerImpl<Id, T, use_host_alloc, min_capacity>;\u000A\u000Atemplate <typename Id, typename T, bool use_host_alloc, size_t min_capacity = 0>\u000Ausing Consumer = detail::ConsumerImpl<Id, T, use_host_alloc, min_capacity>;\u000A\u000A// convenient aliases to get a host or device allocation producer/consumer\u000Atemplate <typename Id, typename T, size_t min_capacity = 0>\u000Ausing HostConsumer = Consumer<Id, T, true, min_capacity>;\u000A\u000Atemplate <typename Id, typename T, size_t min_capacity = 0>\u000Ausing DeviceConsumer = Consumer<Id, T, false, min_capacity>;\u000A\u000Atemplate <typename Id, typename T, size_t min_capacity = 0>\u000Ausing HostProducer = Producer<Id, T, true, min_capacity>;\u000A\u000Atemplate <typename Id, typename T, size_t min_capacity = 0>\u000Ausing DeviceProducer = Producer<Id, T, false, min_capacity>;\u000A\u000A#endif /* __FAKEIOPIPES_HPP__ */\u000A"}, {"path":"/home/u93631/A10_oneapi/matrix_mul/src/HostSideChannel.hpp", "name":"HostSideChannel.hpp", "has_active_debug_locs":false, "absName":"/home/u93631/A10_oneapi/matrix_mul/src/HostSideChannel.hpp", "content":"#ifndef __HOSTSIDECHANNEL_HPP__\u000A#define __HOSTSIDECHANNEL_HPP__\u000A\u000A#include <iostream>\u000A#include <type_traits>\u000A\u000A#include <CL/sycl.hpp>\u000A#include <sycl/ext/intel/fpga_extensions.hpp>\u000A\u000A#include \"FakeIOPipes.hpp\"\u000A\u000Ausing namespace sycl;\u000A\u000A//\u000A// This class provides a convenient, but low-bandwidth and relatively high\u000A// latency, side channel to send data from the host to the device. It exposes\u000A// a read() interface to the DEVICE code that the user can treat just like a\u000A// SYCL pipe. It also exposes a write interface to the HOST that allows the\u000A// user to easily write data from host to the device\u000A//\u000Atemplate <typename Id, typename T, bool use_host_alloc, size_t min_capacity=0>\u000Aclass HostToDeviceSideChannel {\u000Aprotected:\u000A  using MyProducer = Producer<Id, T, use_host_alloc, min_capacity>;\u000A  static inline queue* q_{nullptr};\u000A\u000Apublic:\u000A  // disable copy constructor and operator=\u000A  HostToDeviceSideChannel()=delete;\u000A  HostToDeviceSideChannel(const HostToDeviceSideChannel &)=delete;\u000A  HostToDeviceSideChannel& operator=(HostToDeviceSideChannel const &)=delete;\u000A\u000A  static void Init(queue &q) {\u000A    q_ = &q;\u000A    MyProducer::Init(q, 1);\u000A  };\u000A\u000A  static void Destroy(queue &q) {\u000A    q_ = nullptr;\u000A    MyProducer::Destroy(q);\u000A  };\u000A\u000A  static T read() {\u000A    // DEVICE CODE\u000A    return MyProducer::Pipe::read();\u000A  }\u000A\u000A  static T read(bool &success_code) {\u000A    // DEVICE CODE\u000A    return MyProducer::Pipe::read(success_code);\u000A  }\u000A\u000A  // blocking\u000A  static void write(const T &data) {\u000A    // HOST CODE\u000A    // populate the data\u000A    MyProducer::Data()[0] = data;\u000A\u000A    // start the kernel and wait on it to finish (blocking)\u000A    event dma, kernel;\u000A    std::tie(dma, kernel) = MyProducer::Start(*q_);\u000A    dma.wait();\u000A    kernel.wait();\u000A  }\u000A\u000A  // non-blocking\u000A  // Call .wait() on the returned event to wait for the write to take place\u000A  static event write(const T &data, bool &success_code) {\u000A    // HOST CODE\u000A    // always succeed\u000A    success_code = true;\u000A\u000A    // populate the data\u000A    MyProducer::Data()[0] = data;\u000A\u000A    // start the kernel and return the kernel event\u000A    return MyProducer::Start(*q_).second;\u000A  }\u000A};\u000A\u000A//\u000A// This class provides a convenient, but not highly performing, side channel\u000A// to send data from the device to the host. It exposes a read() interface\u000A// to the HOST code that lets the user get updates from the device.\u000A// It also exposes a write interface to the DEVICE that allows the user to\u000A// easily write data from device to the host.\u000A//\u000Atemplate <typename Id, typename T, bool use_host_alloc, size_t min_capacity=0>\u000Aclass DeviceToHostSideChannel {\u000Aprotected:\u000A  using MyConsumer = Consumer<Id, T, use_host_alloc, min_capacity>;\u000A  static inline queue* q_{nullptr};\u000A\u000Apublic:\u000A  // disable copy constructor and operator=\u000A  DeviceToHostSideChannel()=delete;\u000A  DeviceToHostSideChannel(const DeviceToHostSideChannel &)=delete;\u000A  DeviceToHostSideChannel& operator=(DeviceToHostSideChannel const &)=delete;\u000A\u000A  static void Init(queue &q) {\u000A    q_ = &q;\u000A    MyConsumer::Init(q, 1);\u000A  };\u000A\u000A  static void Destroy(queue &q) {\u000A    q_ = nullptr;\u000A    MyConsumer::Destroy(q);\u000A  };\u000A\u000A  // blocking\u000A  static T read() {\u000A    // HOST CODE\u000A    // launch the kernel to read the data from the pipe into memory\u000A    // and wait for it to finish (blocking)\u000A    event dma, kernel;\u000A    std::tie(dma, kernel) = MyConsumer::Start(*q_);\u000A    dma.wait();\u000A    kernel.wait();\u000A\u000A    // the kernel has finished, so return the data\u000A    return MyConsumer::Data()[0];\u000A  }\u000A\u000A  // non-blocking\u000A  // call .wait() on the returned event to wait for the read to take place,\u000A  // then access the data using ::Data()[0]\u000A  static event read(bool &success_code) {\u000A    // start the kernel and return the event\u000A    // the user can use ::Data() later to get the data\u000A    // return the DMA event, since it happen second\u000A    success_code = true;\u000A    return MyConsumer::Start(*q_).first;\u000A  }\u000A\u000A  static void write(const T &data) {\u000A    // DEVICE CODE\u000A    MyConsumer::Pipe::write(data);\u000A  }\u000A\u000A  static void write(const T &data, bool &success_code) {\u000A    // DEVICE CODE\u000A    MyConsumer::Pipe::write(data, success_code);\u000A  }\u000A\u000A  static T Data() {\u000A    return MyConsumer::Data()[0];\u000A  }\u000A};\u000A\u000A#endif /* __HOSTSIDECHANNEL_HPP__ */\u000A"}, {"path":"/glob/development-tools/versions/oneapi/2022.3/oneapi/dev-utilities/2021.7.0/include/dpc_common.hpp", "name":"dpc_common.hpp", "has_active_debug_locs":false, "absName":"/glob/development-tools/versions/oneapi/2022.3/oneapi/dev-utilities/2021.7.0/include/dpc_common.hpp", "content":"// Copyright (C) 2020 Intel Corporation\u000A// SPDX-License-Identifier: MIT\u000A\u000A#ifndef _DP_HPP\u000A#define _DP_HPP\u000A\u000A#include <stdlib.h>\u000A#include <exception>\u000A\u000A#include <CL/sycl.hpp>\u000A\u000Anamespace dpc_common {\u000A// This exception handler will catch async exceptions\u000Astatic auto exception_handler = [](cl::sycl::exception_list eList) {\u000A  for (std::exception_ptr const &e : eList) {\u000A    try {\u000A      std::rethrow_exception(e);\u000A    } catch (std::exception const &e) {\u000A#if _DEBUG\u000A      std::cout << \"Failure\" << std::endl;\u000A#endif\u000A      std::terminate();\u000A    }\u000A  }\u000A};\u000A\u000A// The TimeInterval is a simple RAII class.\u000A// Construct the timer at the point you want to start timing.\u000A// Use the Elapsed() method to return time since construction.\u000A\u000Aclass TimeInterval {\u000A public:\u000A  TimeInterval() : start_(std::chrono::steady_clock::now()) {}\u000A\u000A  double Elapsed() {\u000A    auto now = std::chrono::steady_clock::now();\u000A    return std::chrono::duration_cast<Duration>(now - start_).count();\u000A  }\u000A\u000A private:\u000A  using Duration = std::chrono::duration<double>;\u000A  std::chrono::steady_clock::time_point start_;\u000A};\u000A\u000A};  // namespace dpc_common\u000A\u000A#endif\u000A"}, {"path":"/home/u93631/A10_oneapi/matrix_mul/src/matrix_mul_kernel_data_parallel.cpp", "name":"matrix_mul_kernel_data_parallel.cpp", "has_active_debug_locs":false, "absName":"/home/u93631/A10_oneapi/matrix_mul/src/matrix_mul_kernel_data_parallel.cpp", "content":"//==============================================================\u000A// Copyright © 2020 Intel Corporation\u000A//\u000A// SPDX-License-Identifier: MIT\u000A// =============================================================\u000A\u000A/**\u000A * Matrix_mul multiplies two large matrices both the CPU and the offload device,\u000A * then compares results. If the code executes on both CPU and the offload\u000A * device, the name of the offload device and a success message are displayed.\u000A *\u000A * For comprehensive instructions regarding DPC++ Programming, go to\u000A * https://software.intel.com/en-us/oneapi-programming-guide and search based on\u000A * relevant terms noted in the comments.\u000A */\u000A\u000A#include <CL/sycl.hpp>\u000A#include <iostream>\u000A#include <limits>\u000A#include <sycl/ext/intel/fpga_extensions.hpp>\u000A#include \"FakeIOPipes.hpp\"\u000A#include \"HostSideChannel.hpp\"\u000A// dpc_common.hpp can be found in the dev-utilities include folder.\u000A// e.g., $ONEAPI_ROOT/dev-utilities/<version>/include/dpc_common.hpp\u000A#include \"dpc_common.hpp\"\u000A\u000Ausing namespace std;\u000Ausing namespace sycl;\u000A\u000Astruct DeviceToHostSideChannelID;\u000Astruct SideChannelMainKernel;\u000Asize_t vector_size = 10000;\u000Atypedef std::vector<int> IntVector; \u000Ausing MyDeviceToHostSideChannel = DeviceToHostSideChannel<DeviceToHostSideChannelID, int, true, 8>;\u000Afloat a_max = 0;\u000Afloat a_min = 10000000;\u000A/**\u000A * Each element of the product matrix c[i][j] is computed from a unique row and\u000A * column of the factor matrices, a[i][k] and b[k][j]\u000A */\u000A\u000A// Matrix size constants.\u000Aconstexpr int m_size = 150 * 8;  // Must be a multiple of 8.\u000Aconstexpr int M = m_size / 8;\u000Aconstexpr int N = m_size / 4;\u000Aconstexpr int P = m_size / 2;\u000Aconst double MAX = 3400000000000000000000000.0;\u000A\u000A/**\u000A * Perform matrix multiplication on host to verify results from device.\u000A */\u000Aint VerifyResult(float (*c_back)[P], float (*a_host)[N], float (*b_host)[P]);\u000A\u000Aint main(int argc, char* argv[]) {\u000A  // Host memory buffer that device will write data back before destruction.\u000A  float(*c_back)[P] = new float[M][P];\u000A    \u000A  float(*a)[N] = new float[M][N];\u000A  float(*b)[P] = new float[N][P];\u000A\u000A  ext::intel::fpga_emulator_selector d_selector;\u000A  // Intialize c_back\u000A  for (int i = 0; i < M; i++)\u000A    for (int j = 0; j < P; j++) c_back[i][j] = 0;\u000A  \u000A  IntVector sum_f, flag;\u000A  sum_f.resize(2);\u000A  flag.resize(100);\u000A  for (int i = 0; i < 100; i++) flag[i] = 0;\u000A  \u000A  std::string file;\u000A  if (argc > 1) file = argv[1];\u000A  std::ifstream read(file);\u000A    \u000A  if (!read.is_open()){\u000A      std::cout << \"Could not open the input file.\\n\";\u000A  } \u000A  float number;\u000A  int i = 0;\u000A  while ((read >> number) and (i<vector_size)){\u000A    a[i/N][i%N] = number;\u000A    if (number>a_max) a_max = number;\u000A    if (number<a_max) a_max = number;\u000A    i = i + 1;\u000A  }\u000A \u000A  i = 0;\u000A  while ((read >> number) and (i<vector_size)){\u000A    b[i/P][i%P] = number;\u000A    if (number>a_max) a_max = number;\u000A    if (number<a_max) a_max = number;\u000A    i = i + 1;\u000A  }\u000A  read.close();\u000A\u000A\u000A  int result;\u000A  \u000A  // Initialize the device queue with the default selector. The device queue is\u000A  // used to enqueue kernels. It encapsulates all states needed for execution.\u000A  try {\u000A    queue q(d_selector, dpc_common::exception_handler);\u000A    cout << \"Device: \" << q.get_device().get_info<info::device::name>() << \"\\n\";\u000A\u000A    // Create 2D buffers for matrices, buffer c is bound with host memory c_back\u000A\u000A    buffer a_buf(reinterpret_cast<float *>(a), range(M, N));\u000A    buffer b_buf(reinterpret_cast<float *>(b), range(N, P));\u000A    buffer c_buf(reinterpret_cast<float *>(c_back), range(M, P));\u000A\u000A    buffer sum_buf(sum_f);\u000A    \u000A\u000A    cout << \"Problem size: c(\" << M << \",\" << P << \") = a(\" << M << \",\" << N\u000A         << \") * b(\" << N << \",\" << P << \")\\n\";\u000A\u000A    // Using three command groups to illustrate execution order. The use of\u000A    // first two command groups for initializing matrices is not the most\u000A    // efficient way. It just demonstrates the implicit multiple command group\u000A    // execution ordering.\u000A\u000A    // Submit command group to queue to initialize matrix a\u000A    //q.submit([&](auto &h) {\u000A      // Get write only access to the buffer on a device.\u000A    //  accessor a(a_buf, h, write_only);\u000A       \u000A      // Execute kernel.\u000A    //  h.parallel_for(range(M, N), [=](auto index) {\u000A        // Each element of matrix a is 1.\u000A    //    a[index] = 1;\u000A    //  });\u000A    //});\u000A\u000A    // Submit command group to queue to initialize matrix b\u000A    //q.submit([&](auto &h) {\u000A      // Get write only access to the buffer on a device\u000A     // accessor b(b_buf, h, write_only);\u000A\u000A      // Execute kernel.\u000A      //h.parallel_for(range(N, P), [=](auto index) {\u000A        // Each column of b is the sequence 1,2,...,N\u000A       // b[index] = index[0] + 1;\u000A\t//if (index[0]==5){b[index] = (1<<30) + 2000;}\u000A      //});\u000A      //b[3][1]=1;\u000A      //b[3][1] = (1<<30) + 2000;\u000A    //});\u000A    \u000A    // Submit command group to queue to multiply matrices: c = a * b\u000A    q.submit([&](auto &h) {\u000A      // Read from a and b, write to c\u000A      accessor a(a_buf, h, read_write);\u000A      accessor b(b_buf, h, read_only);\u000A      accessor c(c_buf, h, write_only);\u000A      accessor sum_f(sum_buf, h, write_only);\u000A      \u000A\u000A      int width_a = a_buf.get_range()[1];\u000A      // Execute kernel.\u000A      h.parallel_for(range(M, P), [=](auto index) {\u000A        // Get global position in Y direction.\u000A        int row = index[0];\u000A        // Get global position in X direction.\u000A        int col = index[1];\u000A        #pragma unroll\u000A        for (int j=0;j<5;j++){\u000A        float sum = 0.0f;\u000A        a[row][j]=1;\u000A        // Compute the result of one element of c\u000A        for (int i = 0; i < width_a; i++) {\u000A          sum += a[row][i] * b[i][col];\u000A        }\u000A        c[index] = sum;\u000A         }\u000A      });\u000A    });\u000A  \u000A  cout << \"Result of matrix multiplication using DPC++: \";\u000A  //result = VerifyResult(c_back, a, b);\u000A\u000A  } catch (sycl::exception const &e) {\u000A    cout << \"An exception is caught while multiplying matrices.\\n\";\u000A    terminate();\u000A  }\u000A  \u000A  \u000A  delete[] c_back;\u000A  std::ofstream outfile;\u000A  outfile.open(\"exec_fpga_info.txt\");\u000A  outfile << a_max << std::endl << a_min << std::endl << a_max;\u000A  outfile.close();\u000A\u000A  return result;\u000A}\u000A\u000Abool ValueSame(float a, float b) {\u000A  return fabs(a - b) <= a * 0.001;\u000A}\u000A\u000Aint VerifyResult(float (*c_back)[P], float (*a_host)[N], float (*b_host)[P]) {\u000A  // Check that the results are correct by comparing with host computing.\u000A  int i, j, k;\u000A\u000A  // 2D arrays on host side.\u000A\u000A  float(*c_host)[P] = new float[M][P];\u000A\u000A  // c_host is initialized to zero.\u000A  for (i = 0; i < M; i++)\u000A    for (j = 0; j < P; j++) c_host[i][j] = 0.0f;\u000A\u000A  for (i = 0; i < M; i++) {\u000A    for (k = 0; k < N; k++) {\u000A      // Each element of the product is just the sum 1+2+...+n\u000A      for (j = 0; j < P; j++) {\u000A        c_host[i][j] += a_host[i][k] * b_host[k][j];\u000A      }\u000A    }\u000A  }\u000A\u000A  bool mismatch_found = false;\u000A\u000A  // Compare host side results with the result buffer from device side: print\u000A  // mismatched data 5 times only.\u000A  int print_count = 0;\u000A\u000A  for (i = 0; i < M; i++) {\u000A    for (j = 0; j < P; j++) {\u000A      if (!ValueSame(c_back[i][j], c_host[i][j])) {\u000A        cout << \"Fail - The result is incorrect for element: [\" << i << \", \"\u000A             << j << \"], expected: \" << c_host[i][j]\u000A             << \", but found: \" << c_back[i][j] << \"\\n\";\u000A        mismatch_found = true;\u000A        print_count++;\u000A        if (print_count == 5) break;\u000A      }\u000A    }\u000A\u000A    if (print_count == 5) break;\u000A  }\u000A    \u000A\u000A  delete[] c_host;\u000A\u000A  if (!mismatch_found) {\u000A    cout << \"Success - The results are correct!\\n\";\u000A    return 0;\u000A  } else {\u000A    cout << \"Fail - The results mismatch!\\n\";\u000A    return -1;\u000A  }\u000A}\u000A"}]